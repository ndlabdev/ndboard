model User {
    id                     String       @id @default(cuid(2))
    email                  String       @unique
    password               String?
    name                   String
    avatar                 String?
    role                   UserRole     @default(USER)
    isVerified             Boolean      @default(false)
    isActive               Boolean      @default(true)
    isBanned               Boolean      @default(false)
    bannedAt               DateTime?
    banReason              String?
    emailVerificationToken String?
    emailVerifiedAt        DateTime?
    passwordResetToken     String?
    passwordResetExpires   DateTime?
    provider               AuthProvider @default(LOCAL)
    providerId             String?
    lastLoginAt            DateTime?
    loginFailCount         Int          @default(0)
    lockedUntil            DateTime?
    twoFactorEnabled       Boolean      @default(false)
    twoFactorSecret        String?
    lastActivityAt         DateTime?
    lastActivityIP         String?
    createdAt              DateTime     @default(now())
    updatedAt              DateTime     @updatedAt

    refreshTokens   RefreshToken[]
    permissions     Permission[]
    adminLogs       AdminLog[]        @relation("AdminLogUser")
    reports         Report[]          @relation("ReporterReports")
    board           Board[]
    boardMember     BoardMember[]
    invitation      Invitation[]
    cardAssignee    CardAssignee[]
    cardWatcher     CardWatcher[]
    checklistItem   ChecklistItem[]
    cardComment     CardComment[]
    commentReaction CommentReaction[]
    cardAttachment  CardAttachment[]
    activityLog     ActivityLog[]
}

enum UserRole {
    USER
    ADMIN
    SUPERADMIN
}

enum AuthProvider {
    LOCAL
    GOOGLE
    GITHUB
    APPLE
    SLACK
    FACEBOOK
}

model RefreshToken {
    id        String   @id @default(cuid(2))
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    token     String   @unique
    expiredAt DateTime
    createdAt DateTime @default(now())
    device    String?
}

model Permission {
    id         String   @id @default(cuid(2))
    user       User     @relation(fields: [userId], references: [id])
    userId     String
    permission String
    grantedAt  DateTime @default(now())
    grantedBy  String?
}

model Settings {
    id        String   @id @default(cuid(2))
    key       String   @unique
    value     Json
    updatedAt DateTime @updatedAt
}

model AdminLog {
    id         String   @id @default(cuid(2))
    user       User     @relation("AdminLogUser", fields: [userId], references: [id])
    userId     String
    action     String
    targetType String
    targetId   String?
    detail     Json?
    createdAt  DateTime @default(now())
}

model Report {
    id           String       @id @default(cuid(2))
    reporter     User         @relation("ReporterReports", fields: [reporterId], references: [id])
    reporterId   String
    reportedType String
    reportedId   String
    reason       String
    status       ReportStatus @default(PENDING)
    createdAt    DateTime     @default(now())
    resolvedAt   DateTime?
}

enum ReportStatus {
    PENDING
    RESOLVED
    REJECTED
}
